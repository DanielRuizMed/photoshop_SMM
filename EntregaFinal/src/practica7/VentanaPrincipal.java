/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica7;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.drm.eventos.MiManejadorLienzo;
import sm.drm.graficos.ColorCellRender;
import sm.drm.graficos.DFormas;
import sm.drm.imagenes.DOperador;
import sm.drm.imagenes.PosterizarOp;
import sm.drm.imagenes.RedOp;
import sm.drm.imagenes.TintadoAutoOp;
import sm.drm.iu.DLienzo2D;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;

/**
 * Clase principal que gestiona el uso de la aplicación y ventanasInternas.
 *
 * @author: Daniel Ruiz Medina
 * @version: 01/06/2021
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    public boolean barra_estado;
    private BufferedImage imgFuente;
    MiManejadorLienzo manejador = new MiManejadorLienzo();
    private SMClipPlayer player = null;
    private SMSoundRecorder recorder = null;

    /**
     * Constructor que inicializa los componentes gráficos e inicializa título y
     * atributos de la clase.
     */
    public VentanaPrincipal() {
        initComponents();
        barra_estado = true;
        grosor.setValue(1.0f);
        imgFuente = null;
        this.setTitle("Intento de Photoshop");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoHerramientas1 = new javax.swing.ButtonGroup();
        grupoBotonesColor = new javax.swing.ButtonGroup();
        grupoBotonesFondoDegradado = new javax.swing.ButtonGroup();
        btnDegradado = new javax.swing.ButtonGroup();
        herramientas = new javax.swing.JToolBar();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnLinea = new javax.swing.JToggleButton();
        btnRectangulo = new javax.swing.JToggleButton();
        btnRectanguloRounds = new javax.swing.JToggleButton();
        btnCIrculo = new javax.swing.JToggleButton();
        btnTrazoLibre = new javax.swing.JToggleButton();
        btnMover = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jPanel2 = new javax.swing.JPanel();
        checkColorFondo = new javax.swing.JCheckBox();
        checkColorBorde = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        Color colores[] = {Color.BLACK, Color.red, Color.BLUE, Color.white, Color.YELLOW, Color.GREEN};
        selectColor = new javax.swing.JComboBox<>(colores);
        btnPaletColor = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        grosor = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();
        checkTrazoDiscontinuo = new javax.swing.JCheckBox();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnSinFondo = new javax.swing.JToggleButton();
        btnRellenar = new javax.swing.JToggleButton();
        btnDegradado1 = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        checkDegradadoHorizontal = new javax.swing.JCheckBox();
        checkDegradoVertical = new javax.swing.JCheckBox();
        btnTransparencia = new javax.swing.JToggleButton();
        sliderTransparencia = new javax.swing.JSlider();
        btnAlisar = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btnClipArea = new javax.swing.JToggleButton();
        btnVolcar = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        btnReproducir = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnInstantanea = new javax.swing.JButton();
        listReproduccion = new javax.swing.JComboBox<>();
        btnSonido = new javax.swing.JToggleButton();
        btnWebCam = new javax.swing.JButton();
        PanelCentral = new javax.swing.JPanel();
        escritorio = new javax.swing.JDesktopPane();
        barraOpcionesImagen = new javax.swing.JToolBar();
        PanelOpcionesImagen = new javax.swing.JPanel();
        PnelOpcionesImagenSuperior = new javax.swing.JPanel();
        btnCopy = new javax.swing.JButton();
        panelBrillo = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        panelFiltros = new javax.swing.JPanel();
        seleccionMascara = new javax.swing.JComboBox<>();
        panelContraste = new javax.swing.JPanel();
        btnNormal = new javax.swing.JButton();
        btnIluminar = new javax.swing.JButton();
        btnOscurecer = new javax.swing.JButton();
        btnNegativo = new javax.swing.JButton();
        panelCuadratica = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        sliderCuadratica = new javax.swing.JSlider();
        jPanel8 = new javax.swing.JPanel();
        btnUmbralT = new javax.swing.JButton();
        sliderUmbralT = new javax.swing.JSlider();
        jPanel9 = new javax.swing.JPanel();
        btnBinarizar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnEnverdecer = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        btnTintado = new javax.swing.JButton();
        sliderTintado = new javax.swing.JSlider();
        btnTintadoAutomatico = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        btnSepia = new javax.swing.JButton();
        btnEcualizar = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        btnResaltarRojo = new javax.swing.JButton();
        sliderPosterizar = new javax.swing.JSlider();
        btnPropio = new javax.swing.JButton();
        panelEspaciosColor = new javax.swing.JPanel();
        btnBandas = new javax.swing.JButton();
        espaciosColor = new javax.swing.JComboBox<>();
        PanelOpcionesImagenInferior = new javax.swing.JPanel();
        panelRotacion = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        rotacion90 = new javax.swing.JButton();
        rotacion180 = new javax.swing.JButton();
        rotacion270 = new javax.swing.JButton();
        panelEscalado = new javax.swing.JPanel();
        btnEscaladoMas = new javax.swing.JButton();
        btnEscaladoMenos = new javax.swing.JButton();
        barraEstado = new javax.swing.JLabel();
        menubar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuItemNuevo = new javax.swing.JMenuItem();
        MenuItemAbrir = new javax.swing.JMenuItem();
        MenuItemGuardar = new javax.swing.JMenuItem();
        btnAyuda = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        MenuItemBarraEstado = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        RescaleOpItem = new javax.swing.JMenuItem();
        controlOpItem = new javax.swing.JMenuItem();
        opAffine = new javax.swing.JMenuItem();
        opLook = new javax.swing.JMenuItem();
        opBand = new javax.swing.JMenuItem();
        opColor = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        herramientas.setRollover(true);

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        botonNuevo.setToolTipText("Nuevo");
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        herramientas.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        botonAbrir.setToolTipText("Abrir");
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        herramientas.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        botonGuardar.setToolTipText("Guardar");
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        herramientas.add(botonGuardar);
        herramientas.add(jSeparator1);

        grupoHerramientas1.add(btnLinea);
        btnLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        btnLinea.setSelected(true);
        btnLinea.setToolTipText("Linea");
        btnLinea.setFocusable(false);
        btnLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLinea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnLineaMouseReleased(evt);
            }
        });
        btnLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineaActionPerformed(evt);
            }
        });
        herramientas.add(btnLinea);

        grupoHerramientas1.add(btnRectangulo);
        btnRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        btnRectangulo.setToolTipText("Rectangulo");
        btnRectangulo.setFocusable(false);
        btnRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRectangulo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnRectanguloMouseReleased(evt);
            }
        });
        btnRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRectanguloActionPerformed(evt);
            }
        });
        herramientas.add(btnRectangulo);

        grupoHerramientas1.add(btnRectanguloRounds);
        btnRectanguloRounds.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rounded-rectangle.png"))); // NOI18N
        btnRectanguloRounds.setToolTipText("Rectangulo Redondeado");
        btnRectanguloRounds.setFocusable(false);
        btnRectanguloRounds.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRectanguloRounds.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRectanguloRounds.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnRectanguloRoundsMouseReleased(evt);
            }
        });
        btnRectanguloRounds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRectanguloRoundsActionPerformed(evt);
            }
        });
        herramientas.add(btnRectanguloRounds);

        grupoHerramientas1.add(btnCIrculo);
        btnCIrculo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        btnCIrculo.setToolTipText("Elipse");
        btnCIrculo.setFocusable(false);
        btnCIrculo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCIrculo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCIrculo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnCIrculoMouseReleased(evt);
            }
        });
        btnCIrculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCIrculoActionPerformed(evt);
            }
        });
        herramientas.add(btnCIrculo);

        grupoHerramientas1.add(btnTrazoLibre);
        btnTrazoLibre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pencil.png"))); // NOI18N
        btnTrazoLibre.setToolTipText("Trazo libre");
        btnTrazoLibre.setFocusable(false);
        btnTrazoLibre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTrazoLibre.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTrazoLibre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrazoLibreActionPerformed(evt);
            }
        });
        herramientas.add(btnTrazoLibre);

        grupoHerramientas1.add(btnMover);
        btnMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        btnMover.setToolTipText("Editar / Mover");
        btnMover.setFocusable(false);
        btnMover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMoverMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnMoverMouseReleased(evt);
            }
        });
        btnMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoverActionPerformed(evt);
            }
        });
        herramientas.add(btnMover);
        herramientas.add(jSeparator2);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.PAGE_AXIS));

        grupoBotonesColor.add(checkColorFondo);
        checkColorFondo.setText("Color Fondo");
        checkColorFondo.setToolTipText("Indica que el color que seleccionemos será el de fondo");
        checkColorFondo.setEnabled(false);
        checkColorFondo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkColorFondoActionPerformed(evt);
            }
        });
        jPanel2.add(checkColorFondo);

        grupoBotonesColor.add(checkColorBorde);
        checkColorBorde.setSelected(true);
        checkColorBorde.setText("Color Borde");
        checkColorBorde.setToolTipText("Indica que el color que selecionemos será para el borde");
        checkColorBorde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkColorBordeActionPerformed(evt);
            }
        });
        jPanel2.add(checkColorBorde);

        herramientas.add(jPanel2);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        selectColor.setToolTipText("Colores rápidos");
        selectColor.setAlignmentX(0.9F);
        selectColor.setAlignmentY(0.9F);
        selectColor.setMinimumSize(new java.awt.Dimension(35, 30));
        selectColor.setPreferredSize(new java.awt.Dimension(35, 30));
        selectColor.setRenderer(new ColorCellRender());
        selectColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectColorItemStateChanged(evt);
            }
        });
        jPanel3.add(selectColor);

        herramientas.add(jPanel3);

        btnPaletColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/circulo-de-color.png"))); // NOI18N
        btnPaletColor.setToolTipText("Paleta de colores");
        btnPaletColor.setFocusable(false);
        btnPaletColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPaletColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPaletColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaletColorActionPerformed(evt);
            }
        });
        herramientas.add(btnPaletColor);
        herramientas.add(jSeparator3);

        grosor.setToolTipText("Grosor");
        grosor.setPreferredSize(new java.awt.Dimension(55, 24));
        grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorStateChanged(evt);
            }
        });
        herramientas.add(grosor);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.PAGE_AXIS));

        checkTrazoDiscontinuo.setText("Línea Discontinua");
        checkTrazoDiscontinuo.setToolTipText("Cambiar el tipo de trazo a discontinua");
        checkTrazoDiscontinuo.setFocusable(false);
        checkTrazoDiscontinuo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        checkTrazoDiscontinuo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        checkTrazoDiscontinuo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTrazoDiscontinuoActionPerformed(evt);
            }
        });
        jPanel4.add(checkTrazoDiscontinuo);

        herramientas.add(jPanel4);
        herramientas.add(jSeparator4);

        grupoBotonesFondoDegradado.add(btnSinFondo);
        btnSinFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinfondo.png"))); // NOI18N
        btnSinFondo.setSelected(true);
        btnSinFondo.setToolTipText("Sin Fondo");
        btnSinFondo.setFocusable(false);
        btnSinFondo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSinFondo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSinFondo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSinFondoActionPerformed(evt);
            }
        });
        herramientas.add(btnSinFondo);

        grupoBotonesFondoDegradado.add(btnRellenar);
        btnRellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        btnRellenar.setToolTipText("Relleno");
        btnRellenar.setFocusable(false);
        btnRellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRellenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRellenarActionPerformed(evt);
            }
        });
        herramientas.add(btnRellenar);

        grupoBotonesFondoDegradado.add(btnDegradado1);
        btnDegradado1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/degradado.png"))); // NOI18N
        btnDegradado1.setToolTipText("rellenar con degrado, usando los colores de borde y fondo");
        btnDegradado1.setFocusable(false);
        btnDegradado1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDegradado1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDegradado1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDegradado1ActionPerformed(evt);
            }
        });
        herramientas.add(btnDegradado1);

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.PAGE_AXIS));

        btnDegradado.add(checkDegradadoHorizontal);
        checkDegradadoHorizontal.setSelected(true);
        checkDegradadoHorizontal.setText("degradado horizontal");
        checkDegradadoHorizontal.setToolTipText("degradado horizontal");
        checkDegradadoHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDegradadoHorizontalActionPerformed(evt);
            }
        });
        jPanel5.add(checkDegradadoHorizontal);

        btnDegradado.add(checkDegradoVertical);
        checkDegradoVertical.setText("degradado vertical");
        checkDegradoVertical.setToolTipText("degradado vertical");
        checkDegradoVertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDegradoVerticalActionPerformed(evt);
            }
        });
        jPanel5.add(checkDegradoVertical);

        herramientas.add(jPanel5);

        btnTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        btnTransparencia.setToolTipText("Opacidad");
        btnTransparencia.setFocusable(false);
        btnTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransparenciaActionPerformed(evt);
            }
        });
        herramientas.add(btnTransparencia);

        sliderTransparencia.setMaximum(10);
        sliderTransparencia.setToolTipText("deslizador transparencia");
        sliderTransparencia.setValue(5);
        sliderTransparencia.setPreferredSize(new java.awt.Dimension(60, 26));
        sliderTransparencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTransparenciaStateChanged(evt);
            }
        });
        herramientas.add(sliderTransparencia);

        btnAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        btnAlisar.setToolTipText("Alisado");
        btnAlisar.setFocusable(false);
        btnAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlisarActionPerformed(evt);
            }
        });
        herramientas.add(btnAlisar);
        herramientas.add(jSeparator5);

        btnClipArea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/002-show.png"))); // NOI18N
        btnClipArea.setToolTipText("ver area seleccionada");
        btnClipArea.setFocusable(false);
        btnClipArea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClipArea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnClipArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClipAreaMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnClipAreaMouseReleased(evt);
            }
        });
        herramientas.add(btnClipArea);

        btnVolcar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/001-down-sketched-arrow.png"))); // NOI18N
        btnVolcar.setToolTipText("volcar imagen");
        btnVolcar.setFocusable(false);
        btnVolcar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVolcar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVolcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolcarActionPerformed(evt);
            }
        });
        herramientas.add(btnVolcar);
        herramientas.add(jSeparator6);

        btnReproducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png"))); // NOI18N
        btnReproducir.setToolTipText("Reproducir Sonido");
        btnReproducir.setFocusable(false);
        btnReproducir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReproducir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReproducirActionPerformed(evt);
            }
        });
        herramientas.add(btnReproducir);

        btnStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop24x24.png"))); // NOI18N
        btnStop.setToolTipText("Detener Sonido");
        btnStop.setFocusable(false);
        btnStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        herramientas.add(btnStop);

        btnInstantanea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        btnInstantanea.setToolTipText("hacer instantanear");
        btnInstantanea.setFocusable(false);
        btnInstantanea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnInstantanea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnInstantanea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstantaneaActionPerformed(evt);
            }
        });
        herramientas.add(btnInstantanea);

        listReproduccion.setPreferredSize(new java.awt.Dimension(180, 20));
        herramientas.add(listReproduccion);

        btnSonido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        btnSonido.setToolTipText("Grabar Sonido");
        btnSonido.setFocusable(false);
        btnSonido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSonido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSonidoActionPerformed(evt);
            }
        });
        herramientas.add(btnSonido);

        btnWebCam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        btnWebCam.setToolTipText("encender webcam");
        btnWebCam.setFocusable(false);
        btnWebCam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnWebCam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnWebCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWebCamActionPerformed(evt);
            }
        });
        herramientas.add(btnWebCam);

        getContentPane().add(herramientas, java.awt.BorderLayout.PAGE_START);

        PanelCentral.setLayout(new java.awt.BorderLayout());

        escritorio.setMinimumSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2301, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 524, Short.MAX_VALUE)
        );

        PanelCentral.add(escritorio, java.awt.BorderLayout.CENTER);

        barraOpcionesImagen.setRollover(true);

        PanelOpcionesImagen.setLayout(new java.awt.GridLayout(2, 0));

        PnelOpcionesImagenSuperior.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btnCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/copy.png"))); // NOI18N
        btnCopy.setToolTipText("Copia una Imagen");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });
        PnelOpcionesImagenSuperior.add(btnCopy);

        panelBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        panelBrillo.setMaximumSize(new java.awt.Dimension(212, 49));
        panelBrillo.setMinimumSize(new java.awt.Dimension(212, 49));
        panelBrillo.setLayout(new java.awt.BorderLayout());

        sliderBrillo.setMaximum(255);
        sliderBrillo.setMinimum(-255);
        sliderBrillo.setToolTipText("Brillo");
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        panelBrillo.add(sliderBrillo, java.awt.BorderLayout.CENTER);

        PnelOpcionesImagenSuperior.add(panelBrillo);

        panelFiltros.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros"));
        panelFiltros.setLayout(new java.awt.GridLayout(1, 0));

        seleccionMascara.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplacamos", "Emborronamiento Horizontal", "Emborronamiento Diagonal" }));
        seleccionMascara.setToolTipText("Filtros de imagen");
        seleccionMascara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionMascaraActionPerformed(evt);
            }
        });
        panelFiltros.add(seleccionMascara);

        PnelOpcionesImagenSuperior.add(panelFiltros);

        panelContraste.setBorder(javax.swing.BorderFactory.createTitledBorder("Contrastes"));
        panelContraste.setLayout(new java.awt.GridLayout(2, 0));

        btnNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        btnNormal.setToolTipText("Normal");
        btnNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNormalActionPerformed(evt);
            }
        });
        panelContraste.add(btnNormal);

        btnIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        btnIluminar.setToolTipText("Iluminación");
        btnIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIluminarActionPerformed(evt);
            }
        });
        panelContraste.add(btnIluminar);

        btnOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        btnOscurecer.setToolTipText("Oscurecer");
        btnOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOscurecerActionPerformed(evt);
            }
        });
        panelContraste.add(btnOscurecer);

        btnNegativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/insertar-icono-de-imagen.png"))); // NOI18N
        btnNegativo.setToolTipText("Negativo ");
        btnNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNegativoActionPerformed(evt);
            }
        });
        panelContraste.add(btnNegativo);

        PnelOpcionesImagenSuperior.add(panelContraste);

        panelCuadratica.setBorder(javax.swing.BorderFactory.createTitledBorder("Otros Efectos"));
        panelCuadratica.setLayout(new java.awt.GridLayout(2, 0));

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cuadratica.png"))); // NOI18N
        jButton1.setToolTipText("Función Cuadrática");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton1);

        sliderCuadratica.setMaximum(255);
        sliderCuadratica.setToolTipText("Aplicar Cuadratica");
        sliderCuadratica.setValue(128);
        sliderCuadratica.setPreferredSize(new java.awt.Dimension(100, 26));
        sliderCuadratica.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderCuadraticaStateChanged(evt);
            }
        });
        sliderCuadratica.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderCuadraticaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderCuadraticaFocusLost(evt);
            }
        });
        jPanel7.add(sliderCuadratica);

        panelCuadratica.add(jPanel7);

        btnUmbralT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/letra-t.png"))); // NOI18N
        btnUmbralT.setToolTipText("Operación umbral T");
        btnUmbralT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUmbralTActionPerformed(evt);
            }
        });
        jPanel8.add(btnUmbralT);

        sliderUmbralT.setMaximum(255);
        sliderUmbralT.setToolTipText("slider umbral T");
        sliderUmbralT.setValue(128);
        sliderUmbralT.setPreferredSize(new java.awt.Dimension(100, 26));
        sliderUmbralT.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderUmbralTStateChanged(evt);
            }
        });
        sliderUmbralT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderUmbralTFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderUmbralTFocusLost(evt);
            }
        });
        jPanel8.add(sliderUmbralT);

        panelCuadratica.add(jPanel8);

        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnBinarizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/regresion-lineal.png"))); // NOI18N
        btnBinarizar.setToolTipText("binarizar");
        btnBinarizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinarizarActionPerformed(evt);
            }
        });
        jPanel9.add(btnBinarizar);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/combinar.png"))); // NOI18N
        jButton2.setToolTipText("media");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton2);

        btnEnverdecer.setBackground(new java.awt.Color(0, 204, 0));
        btnEnverdecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/combinar.png"))); // NOI18N
        btnEnverdecer.setToolTipText("enverdecer");
        btnEnverdecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnverdecerActionPerformed(evt);
            }
        });
        jPanel9.add(btnEnverdecer);

        panelCuadratica.add(jPanel9);

        btnTintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        btnTintado.setToolTipText("tintado");
        btnTintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTintadoActionPerformed(evt);
            }
        });
        jPanel11.add(btnTintado);

        sliderTintado.setToolTipText("nivel tintado");
        sliderTintado.setPreferredSize(new java.awt.Dimension(100, 26));
        sliderTintado.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTintadoStateChanged(evt);
            }
        });
        sliderTintado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderTintadoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderTintadoFocusLost(evt);
            }
        });
        jPanel11.add(sliderTintado);

        btnTintadoAutomatico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tinta.png"))); // NOI18N
        btnTintadoAutomatico.setToolTipText("tintadoAutomatico");
        btnTintadoAutomatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTintadoAutomaticoActionPerformed(evt);
            }
        });
        jPanel11.add(btnTintadoAutomatico);

        panelCuadratica.add(jPanel11);

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        btnSepia.setToolTipText("Sepia");
        btnSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSepiaActionPerformed(evt);
            }
        });
        jPanel10.add(btnSepia);

        btnEcualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        btnEcualizar.setToolTipText("ecualizar");
        btnEcualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEcualizarActionPerformed(evt);
            }
        });
        jPanel10.add(btnEcualizar);

        panelCuadratica.add(jPanel10);

        jPanel6.setMinimumSize(new java.awt.Dimension(100, 16));
        jPanel6.setPreferredSize(new java.awt.Dimension(100, 16));

        btnResaltarRojo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rojo.png"))); // NOI18N
        btnResaltarRojo.setToolTipText("resaltar rojo");
        btnResaltarRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResaltarRojoActionPerformed(evt);
            }
        });
        jPanel6.add(btnResaltarRojo);

        sliderPosterizar.setMaximum(20);
        sliderPosterizar.setMinimum(2);
        sliderPosterizar.setToolTipText("nivel posterizado");
        sliderPosterizar.setValue(2);
        sliderPosterizar.setPreferredSize(new java.awt.Dimension(100, 26));
        sliderPosterizar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPosterizarStateChanged(evt);
            }
        });
        sliderPosterizar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderPosterizarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderPosterizarFocusLost(evt);
            }
        });
        jPanel6.add(sliderPosterizar);

        btnPropio.setText("PP");
        btnPropio.setToolTipText("Operador propio");
        btnPropio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPropioActionPerformed(evt);
            }
        });
        jPanel6.add(btnPropio);

        panelCuadratica.add(jPanel6);

        PnelOpcionesImagenSuperior.add(panelCuadratica);

        panelEspaciosColor.setBorder(javax.swing.BorderFactory.createTitledBorder("Espacios"));
        panelEspaciosColor.setLayout(new java.awt.BorderLayout());

        btnBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        btnBandas.setToolTipText("muestra bandas");
        btnBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBandasActionPerformed(evt);
            }
        });
        panelEspaciosColor.add(btnBandas, java.awt.BorderLayout.CENTER);

        espaciosColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sRGB", "YCC", "Grey", "YCBCR" }));
        espaciosColor.setToolTipText("espacios de color");
        espaciosColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espaciosColorActionPerformed(evt);
            }
        });
        panelEspaciosColor.add(espaciosColor, java.awt.BorderLayout.LINE_END);

        PnelOpcionesImagenSuperior.add(panelEspaciosColor);

        PanelOpcionesImagen.add(PnelOpcionesImagenSuperior);

        PanelOpcionesImagenInferior.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        panelRotacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));
        panelRotacion.setLayout(new java.awt.GridLayout(1, 0));

        sliderRotacion.setMaximum(360);
        sliderRotacion.setToolTipText("rotación libre");
        sliderRotacion.setValue(0);
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        panelRotacion.add(sliderRotacion);

        rotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        rotacion90.setToolTipText("rotar 90º");
        rotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90ActionPerformed(evt);
            }
        });
        jPanel1.add(rotacion90);

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        rotacion180.setToolTipText("rotar 180º");
        rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180ActionPerformed(evt);
            }
        });
        jPanel1.add(rotacion180);

        rotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        rotacion270.setToolTipText("rotar 270º");
        rotacion270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion270ActionPerformed(evt);
            }
        });
        jPanel1.add(rotacion270);

        panelRotacion.add(jPanel1);

        PanelOpcionesImagenInferior.add(panelRotacion);

        panelEscalado.setBorder(javax.swing.BorderFactory.createTitledBorder("Escalado"));
        panelEscalado.setLayout(new java.awt.GridLayout(1, 0));

        btnEscaladoMas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        btnEscaladoMas.setToolTipText("maximizar escalado");
        btnEscaladoMas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscaladoMasActionPerformed(evt);
            }
        });
        panelEscalado.add(btnEscaladoMas);

        btnEscaladoMenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        btnEscaladoMenos.setToolTipText("minimizar escalado");
        btnEscaladoMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscaladoMenosActionPerformed(evt);
            }
        });
        panelEscalado.add(btnEscaladoMenos);

        PanelOpcionesImagenInferior.add(panelEscalado);

        PanelOpcionesImagen.add(PanelOpcionesImagenInferior);

        barraOpcionesImagen.add(PanelOpcionesImagen);

        PanelCentral.add(barraOpcionesImagen, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(PanelCentral, java.awt.BorderLayout.CENTER);

        barraEstado.setText("Barra de estado");
        barraEstado.setToolTipText("");
        barraEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        getContentPane().add(barraEstado, java.awt.BorderLayout.PAGE_END);

        jMenu1.setText("Archivo");

        MenuItemNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        MenuItemNuevo.setText("Nuevo");
        MenuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(MenuItemNuevo);

        MenuItemAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        MenuItemAbrir.setText("Abrir");
        MenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(MenuItemAbrir);

        MenuItemGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        MenuItemGuardar.setText("Guardar");
        MenuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(MenuItemGuardar);

        btnAyuda.setText("Ayuda");
        btnAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAyudaActionPerformed(evt);
            }
        });
        jMenu1.add(btnAyuda);

        menubar.add(jMenu1);

        jMenu2.setText("Edición");

        MenuItemBarraEstado.setSelected(true);
        MenuItemBarraEstado.setText("Barra estado");
        MenuItemBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemBarraEstadoActionPerformed(evt);
            }
        });
        jMenu2.add(MenuItemBarraEstado);

        menubar.add(jMenu2);

        jMenu3.setText("Imagen");

        RescaleOpItem.setText("Operador RescaleOp");
        RescaleOpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RescaleOpItemActionPerformed(evt);
            }
        });
        jMenu3.add(RescaleOpItem);

        controlOpItem.setText("operador ControlOp");
        controlOpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlOpItemActionPerformed(evt);
            }
        });
        jMenu3.add(controlOpItem);

        opAffine.setText("operador AffineTransformOp");
        opAffine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opAffineActionPerformed(evt);
            }
        });
        jMenu3.add(opAffine);

        opLook.setText("operador LookupOp");
        opLook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opLookActionPerformed(evt);
            }
        });
        jMenu3.add(opLook);

        opBand.setText("operador BandCombineOp");
        opBand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opBandActionPerformed(evt);
            }
        });
        jMenu3.add(opBand);

        opColor.setText("operador ColorConvertOp");
        opColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opColorActionPerformed(evt);
            }
        });
        jMenu3.add(opColor);

        menubar.add(jMenu3);

        setJMenuBar(menubar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que crea una ventana interna nueva. Le añade un la clase evento
     * para gestionar el nombre de la figura seleccionada y que los botones de
     * atributos correspondan con la figura seleccionada.
     *
     * @param evt evento lanzador
     */
    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        //crear ventana interna y añadir al escritorio
        VentanaInternaImagen vi = new VentanaInternaImagen();
        escritorio.add(vi);
        vi.setTitle("Nuevo lienzo");
        vi.setVisible(true);

        //Evento que maneja el cambio de botones cuando pulsamos una forma en lienzo
        vi.getLienzo2D().addLienzoListener(new MiManejadorLienzo() {
            @Override
            public void shapeClicked() {
                DFormas seleccionada = vi.getLienzo2D().getFiguraSeleccionada();

                if (seleccionada != null) {

                    //Indicamos en la barra estado la figura seleccionada
                    barraEstado.setText("Figura seleccionada: " + vi.getLienzo2D().getFiguraSeleccionada().getNombre());

                    //trazo
                    setGrosor(seleccionada.getGrosor());
                    if (seleccionada.getTipoTrazo() > 0) {
                        getCheckTrazoDiscontinuo().setSelected(true);
                    } else {
                        getCheckTrazoDiscontinuo().setSelected(false);
                    }

                    //fondo relleno y degradadp
                    if (seleccionada.isRelleno()) {

                        if (seleccionada.isIsdragadado()) {
                            btnDegradado1.setSelected(true);

                            if (seleccionada.isHorizontal()) {
                                checkDegradadoHorizontal.setSelected(true);
                            } else {
                                checkDegradoVertical.setSelected(true);
                            }

                        } else {
                            btnRellenar.setSelected(true);
                        }

                        checkColorBorde.setSelected(true);
                        checkColorFondo.setEnabled(true);

                    } else {
                        btnSinFondo.setSelected(true);
                        checkColorBorde.setSelected(true);
                        checkColorFondo.setEnabled(false);
                    }

                    //alisado y transparencia
                    if (seleccionada.isCompoTrans()) {
                        btnTransparencia.setSelected(true);
                    } else {
                        btnTransparencia.setSelected(false);
                    }

                    if (seleccionada.isRenderAlisar()) {
                        btnAlisar.setSelected(true);
                    } else {
                        btnAlisar.setSelected(false);
                    }
                }

            }
        });

    }//GEN-LAST:event_botonNuevoActionPerformed

    /**
     * Método que crea una ventana interna nueva del menú desplegable.
     *
     * @param evt evento lanzador
     */
    private void MenuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemNuevoActionPerformed
        this.botonNuevoActionPerformed(evt);
    }//GEN-LAST:event_MenuItemNuevoActionPerformed

    /**
     * Método para abrir una imagen, audio o video en una nueva ventana, los 
     * formatos aceptados con los controlador por el fitro(png,jpg,jpeg,wav,au 
     * y de video los soportado por vlcplayer)
     *
     * @param evt evento lanzador
     */
    private void MenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAbrirActionPerformed

        JFileChooser dlg = new JFileChooser();

        //Creamos los filtros JPN Y PNG
        FileFilter imagenesFilter = new FileNameExtensionFilter("Formatos aceptados", "png", "jpg", "jpeg", "WAV", "AU");
        dlg.addChoosableFileFilter(imagenesFilter);

        int resp = dlg.showOpenDialog(this);

        if (resp == JFileChooser.APPROVE_OPTION) {
            try {

                File selectedFile = dlg.getSelectedFile();
                String extensiones = selectedFile.getPath().substring(selectedFile.getPath().lastIndexOf("."));//cogemos la rextension

                if (extensiones.equals(".au") || extensiones.equals(".wav")) {
                    File f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };

                    this.listReproduccion.addItem(f);
                    this.listReproduccion.setSelectedItem(f);
                } else if (extensiones.equals(".png") || extensiones.equals(".jpg")) {

                    BufferedImage img = ImageIO.read(selectedFile);
                    VentanaInternaImagen vi = new VentanaInternaImagen();
                    vi.getLienzo2D().setImagen(img);
                    this.escritorio.add(vi);
                    vi.setTitle(selectedFile.getName());
                    vi.setVisible(true);

                } else { //si son videos 
                    VentanaInternaVideo vv = VentanaInternaVideo.getInstance(selectedFile);
                    this.escritorio.add(vv);
                    vv.setTitle(selectedFile.getName());
                    vv.setVisible(true);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(escritorio, "Error al leer la imagen");
            }
        } else if (resp == JFileChooser.CANCEL_OPTION) {
            JOptionPane.showMessageDialog(escritorio, "No se ha elegido ninguna imagen");
        }
    }//GEN-LAST:event_MenuItemAbrirActionPerformed

    /**
     * Método para guardar una imagen con los formatos png, jpg o jpeg 
     * utilizando filtros
     *
     * @param evt evento lanzador
     */
    private void MenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemGuardarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(true);
            if (img != null) {

                String aux = "jpg";

                JFileChooser dlg = new JFileChooser();
                //Creamos los filtros JPN Y PNG
                FileFilter imagenesFilter = new FileNameExtensionFilter("Formatos aceptados", "png", "jpg", "jpeg");
                dlg.addChoosableFileFilter(imagenesFilter);

                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {

                        File f = dlg.getSelectedFile();
                        String[] formatos = ImageIO.getWriterFormatNames();//cogemos el formatos validos
                        boolean existe = false;
                        String extensiones = f.getPath().substring(f.getPath().lastIndexOf("."));//cogemos  .png o .jpg

                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());

                        //recorremos buscnado si el formato elegido es el seleccionado
                        for (int i = 0; i < formatos.length && !existe; i++) {
                            if (formatos[i].equals("png") || formatos[i].equals("jpg")) {
                                existe = true;
                            }
                        }

                        if (existe) {

                            if (extensiones.equals(".png")) {
                                aux = "png";
                            }

                            ImageIO.write(img, aux, f);
                            vi.setTitle(f.getName());
                        } else {
                            JOptionPane.showMessageDialog(escritorio, "Formato no soportado");
                        }

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(escritorio, "Error al guardar la imagen, no has seleccionado un formato valido ['jpg','png']");
                    }
                } else if (resp == JFileChooser.CANCEL_OPTION) {
                    JOptionPane.showMessageDialog(escritorio, "No se ha guardado la imagen");
                }
            }
        }
    }//GEN-LAST:event_MenuItemGuardarActionPerformed

    /**
     * Método para activar o desactivar la barra de estado
     *
     * @param evt evento lanzador
     */
    private void MenuItemBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemBarraEstadoActionPerformed
        if (MenuItemBarraEstado.isSelected()) {
            barra_estado = true;
            barraEstado.setText("Barra de estado activada");
            barraEstado.setEnabled(true);
        } else {
            barra_estado = false;
            barraEstado.setText("Barra de estado desactivada");
            barraEstado.setEnabled(false);
        }
    }//GEN-LAST:event_MenuItemBarraEstadoActionPerformed

    /**
     * Método para arbir una imagen, video o audio del menu desplegable.
     *
     * @param evt evento lanzador
     */
    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        this.MenuItemAbrirActionPerformed(evt);
    }//GEN-LAST:event_botonAbrirActionPerformed

    /**
     * Método para guardar del menu desplegable.
     *
     * @param evt evento lanzador
     */
    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        this.MenuItemGuardarActionPerformed(evt);
    }//GEN-LAST:event_botonGuardarActionPerformed

    /**
     * Método para indicar al lienzo de la ventana seleccionada que se modifica 
     * el grosor de la línea de una figura
     *
     * @param evt evento lanzador
     */
    private void grosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorStateChanged

        //if (btnMover.isSelected()) {
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            //vi.getLienzo2D().setStroke(new BasicStroke(((Integer) grosor.getValue()).floatValue()));
            vi.getLienzo2D().setStrokeFloat((Integer) grosor.getValue());
            vi.getLienzo2D().repaint();
        }
        /*} else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }*/

    }//GEN-LAST:event_grosorStateChanged

    /**
     * Método para indicar al lienzo de la ventana seleccionada que se modifica 
     * el relleno de una figura
     *
     * @param evt evento lanzador
     */
    private void btnRellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRellenarActionPerformed

        if (btnMover.isSelected()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
            if (vi != null) {
                this.checkColorFondo.setEnabled(true);
                this.checkColorFondo.setSelected(true);
                vi.getLienzo2D().setRelleno(btnRellenar.isSelected());
                vi.getLienzo2D().setDegradado(false);
                vi.getLienzo2D().repaint();
            }
        } else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }
    }//GEN-LAST:event_btnRellenarActionPerformed

    /**
     * Método para indicar al lienzo de la ventana seleccionada que se modifica 
     * el color de fondo o borde de una figura.
     *
     * @param evt evento lanzador
     */
    private void selectColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectColorItemStateChanged

        //if (btnMover.isSelected()) {
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            if (this.checkColorFondo.isSelected()) {
                vi.getLienzo2D().setColorFondo((Color) evt.getItem());

            } else {
                vi.getLienzo2D().setColorBorde((Color) evt.getItem());
            }

            vi.getLienzo2D().repaint();
        }
        /*} else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }*/
    }//GEN-LAST:event_selectColorItemStateChanged

    /**
     * Método para indicar al lienzo de la ventana seleccionada que se modifica 
     * la transparencia de una figura.
     *
     * @param evt evento lanzador
     */
    private void btnTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransparenciaActionPerformed

        if (btnMover.isSelected()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
            if (vi != null) {
                vi.getLienzo2D().setTransparente(btnTransparencia.isSelected(), 0.5f);
                vi.getLienzo2D().repaint();
            }
        } else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }
    }//GEN-LAST:event_btnTransparenciaActionPerformed

    /**
     * Método para indicar al lienzo de la ventana seleccionada que se modifica 
     * el alisado de línea de una figura.
     *
     * @param evt evento lanzador
     */
    private void btnAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlisarActionPerformed

        if (btnMover.isSelected()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
            if (vi != null) {
                vi.getLienzo2D().setAlisado(btnAlisar.isSelected());
                vi.getLienzo2D().repaint();
            }
        } else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }
    }//GEN-LAST:event_btnAlisarActionPerformed

    /**
     * Método utilizado para indicar al lienzo que se desea pintar una línea.
     *
     * @param evt evento lanzador
     */
    private void btnLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineaActionPerformed
        btnLinea.setSelected(true);
        DLienzo2D.setMover(false);//por si se queda seleccionado mover (mismo grupo)
        barraEstado.setText("Dibujando: línea");
        DLienzo2D.setForma(DLienzo2D.LINEA);
    }//GEN-LAST:event_btnLineaActionPerformed

    /**
     * Método utilizado para indicar al lienzo que se desea pintar un rectángulo.
     *
     * @param evt evento lanzador
     */
    private void btnRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectanguloActionPerformed
        btnRectangulo.setSelected(true);
        DLienzo2D.setMover(false);//por si se queda seleccionado mover (mismo grupo)
        barraEstado.setText("Dibujando: cuadrado");
        DLienzo2D.setForma(DLienzo2D.RECTANGULO);
    }//GEN-LAST:event_btnRectanguloActionPerformed

    /**
     * Método utilizado para indicar al lienzo que se desea pintar un óvalo.
     *
     * @param evt evento lanzador
     */
    private void btnCIrculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCIrculoActionPerformed
        btnCIrculo.setSelected(true);
        DLienzo2D.setMover(false);//por si se queda seleccionado mover (mismo grupo)
        barraEstado.setText("Dibujando: ovalo");
        DLienzo2D.setForma(DLienzo2D.CIRCULO);
    }//GEN-LAST:event_btnCIrculoActionPerformed

    /**
     * Método utilizado para indicar al lienzo que se desea mover las figuras 
     * que se selecione contenidas en dicho lienzo.
     *
     * @param evt evento lanzador
     */
    private void btnMoverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMoverMouseClicked
        DLienzo2D.setMover(true);
    }//GEN-LAST:event_btnMoverMouseClicked

    /**
     * Método utilizado para indicar al lienzo que se desea dejar de mover las 
     * figuras.
     *
     * @param evt evento lanzador
     */
    private void btnMoverMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMoverMouseReleased
        //DLienzo2D.setMover(false);
    }//GEN-LAST:event_btnMoverMouseReleased

    /**
     * Método utilizado para indicar al lienzo que se desea ver el lienzo 
     * mendiante un área de recorte.
     *
     * @param evt evento lanzador
     */
    private void btnClipAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClipAreaMouseClicked
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            barraEstado.setText("Seleccionado botón de ver área");
            vi.getLienzo2D().setVentanaClipActiva(btnClipArea.isSelected());
            vi.getLienzo2D().repaint();
        }
    }//GEN-LAST:event_btnClipAreaMouseClicked

    /**
     * Método utilizado para indicar al lienzo que se desea ver el lienzo 
     * mendiante un área de recorte.
     *
     * @param evt evento lanzador
     */
    private void btnClipAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClipAreaMouseReleased
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            barraEstado.setText("Deseleccionado botón de ver área");
            vi.getLienzo2D().setVentanaClipActiva(false);
            vi.getLienzo2D().repaint();
        }
    }//GEN-LAST:event_btnClipAreaMouseReleased

    /**
     * Método utilizado para indicar al lienzo que se desea volvar todas las 
     * figuras del lienzo en la imagen del lienzo.
     *
     * @param evt evento lanzador
     */
    private void btnVolcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolcarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            barraEstado.setText("Imagen Volcada");
            vi.getLienzo2D().VolcarImagen();
        }

    }//GEN-LAST:event_btnVolcarActionPerformed

    /**
     * Método utilizado para reescalar una imagen desde el menú desplegable.
     *
     * @param evt evento lanzador
     */
    private void RescaleOpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RescaleOpItemActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {
                    //creamos operador de resscalado +100 a cada pixel y aumenta el brillo
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    //aplicamos el operador sobre el metodo filter
                    rop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_RescaleOpItemActionPerformed

    /**
     * Método utilizado para ver el operador de convolución de 
     * una imagen desde el menú desplegable.
     *
     * @param evt evento lanzador
     */
    private void controlOpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlOpItemActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};//9 valores del filtro
                    Kernel k = new Kernel(3, 3, filtro);//es una clase especifica de java que se le indica la dimension y filtros
                    ConvolveOp cop = new ConvolveOp(k);//operador de convolucion se le pasa como parametro un kernal

                    //se hace le filter sobre una imagen misma
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImagen(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_controlOpItemActionPerformed

    /**
     * Método utilizado para indicar al lienzo que el slider ha sido modificado 
     * y se desea actualizar el valor del brillo de la imagen del lienzo.
     *
     * @param evt evento lanzador
     */
    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {
                    int brillo = this.sliderBrillo.getValue();
                    //creamos operador de resscalado +100 a cada pixel y aumenta el brillo
                    RescaleOp rop = new RescaleOp(1.0F, brillo, null);
                    //aplicamos el operador sobre el metodo filter
                    rop.filter(imgFuente, img);
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    /**
     * Método utilizado para hacer una copia de la imagen del lienzo en otra 
     * que será modificada en los eventos de cambio del slider.
     *
     * @param evt evento lanzador
     */
    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            //hacemos copia de la imagen original y se la asignamos al imgFuente
            ColorModel cm = vi.getLienzo2D().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    /**
     * Método utilizado cuando se pierde el foco del slider de brillo para poner
     * la imagen de copia a null y resetear el slider.
     *
     * @param evt evento lanzador
     */
    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imgFuente = null;
        this.sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    /**
     * Método utilizado para seleccionar el tipo de filtro que se desea 
     * realizar a la imagen con un comboBox.
     *
     * @param evt evento lanzador
     */
    private void seleccionMascaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionMascaraActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();

            int seleccion = this.seleccionMascara.getSelectedIndex();
            Kernel k = this.getKernel(seleccion);

            if (img != null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k);//operador de convolucion se le pasa como parametro un kernal
                    //se hace le filter sobre una imagen misma
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImagen(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_seleccionMascaraActionPerformed

    /**
     * Método utilizado para hacer una rotación a la imagen fija desde el menú 
     * desplegable  para la realización de pruebas.
     *
     * @param evt evento lanzador
     */
    private void opAffineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opAffineActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.5, 1.5);
                    //Mejoras en la Interpolación
                    //AffineTransformOp atop = new AffineTransformOp(at, null);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImagen(imgdest);

                    //Rotacion
                    AffineTransform at1 = AffineTransform.getRotateInstance(Math.toRadians(45), img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransformOp atop1 = new AffineTransformOp(at1, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest1 = atop1.filter(img, null);
                    vi.getLienzo2D().setImagen(imgdest1);

                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_opAffineActionPerformed

    /**
     * Método utilizado para hacer aplicar un LookupTbale fijo a la imagen desde el menú 
     * desplegable  para la realización de pruebas.
     *
     * @param evt evento lanzador
     */
    private void opLookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opLookActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {
                    byte funcionT[] = new byte[256];
                    for (int x = 0; x < 256; x++) {
                        funcionT[x] = (byte) (255 - x); // Negativo
                    }
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_opLookActionPerformed

    /**
     * Método utilizado para que se aplique el filtro normal a la imagen.
     *
     * @param evt evento lanzador
     */
    private void btnNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNormalActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
        aplicarLookup(tabla);
    }//GEN-LAST:event_btnNormalActionPerformed

    /**
     * Método utilizado para que se aplique el filtro iluminar a la imagen.
     *
     * @param evt evento lanzador
     */
    private void btnIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIluminarActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
        aplicarLookup(tabla);
    }//GEN-LAST:event_btnIluminarActionPerformed

    /**
     * Método utilizado para que se aplique el filtro oscurecer a la imagen.
     *
     * @param evt evento lanzador
     */
    private void btnOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOscurecerActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
        aplicarLookup(tabla);
    }//GEN-LAST:event_btnOscurecerActionPerformed

    /**
     * Método utilizado para que se aplique la función cuadrática a la imagen.
     *
     * @param evt evento lanzador
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        LookupTable tabla = cuadratica(128);
        aplicarLookup(tabla);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Método utilizado para realizar una rotación de 90º fija sobre la imagen 
     * del lienzo activo.
     *
     * @param evt evento lanzador
     */
    private void rotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90ActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                //Rotacion
                AffineTransform at1 = AffineTransform.getRotateInstance(Math.toRadians(90), img.getWidth() / 2, img.getHeight() / 2);
                AffineTransformOp atop1 = new AffineTransformOp(at1, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest1 = atop1.filter(img, null);
                vi.getLienzo2D().setImagen(imgdest1);
                vi.getLienzo2D().repaint();
            }
        }
    }//GEN-LAST:event_rotacion90ActionPerformed

    /**
     * Método utilizado que tras modificar los valores de un slider indica el 
     * nuevo valor de rotación a la imagen del lienzo activo.
     *
     * @param evt evento lanzador
     */
    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null && imgFuente != null) {
            BufferedImage imgSource = imgFuente;
            if (imgSource != null) {
                try {
                    int rotacion = this.sliderRotacion.getValue();
                    double r = Math.toRadians(rotacion);
                    Point c = new Point(imgFuente.getWidth() / 2, imgFuente.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, c.x, c.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);

                    vi.getLienzo2D().setImagen(imgdest);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderRotacionStateChanged

    /**
     * Método utilizado para hacer una copia de la imagen del lienzo en otra 
     * que será modificada en los eventos de cambio del slider.
     *
     * @param evt evento lanzador
     */
    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            //hacemos copia de la imagen original y se la asignamos al imgFuente
            ColorModel cm = vi.getLienzo2D().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);

            vi.getLienzo2D().setImagen(imgFuente);
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    /**
     * Método utilizado cuando se pierde el foco del slider de rotación para poner
     * la imagen de copia a null y resetear el slider.
     *
     * @param evt evento lanzador
     */
    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imgFuente = null;
        this.sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    /**
     * Método utilizado para realizar una rotación fija de 180º a la imagen del 
     * lienzo.
     *
     * @param evt evento lanzador
     */
    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                //Rotacion
                AffineTransform at1 = AffineTransform.getRotateInstance(Math.toRadians(180), img.getWidth() / 2, img.getHeight() / 2);
                AffineTransformOp atop1 = new AffineTransformOp(at1, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest1 = atop1.filter(img, null);
                vi.getLienzo2D().setImagen(imgdest1);
                vi.getLienzo2D().repaint();
            }
        }
    }//GEN-LAST:event_rotacion180ActionPerformed

    /**
     * Método utilizado para realizar una rotación fija de 270º a la imagen del 
     * lienzo.
     *
     * @param evt evento lanzador
     */
    private void rotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270ActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                //Rotacion
                AffineTransform at1 = AffineTransform.getRotateInstance(Math.toRadians(270), img.getWidth() / 2, img.getHeight() / 2);
                AffineTransformOp atop1 = new AffineTransformOp(at1, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest1 = atop1.filter(img, null);
                vi.getLienzo2D().setImagen(imgdest1);
                vi.getLienzo2D().repaint();
            }
        }
    }//GEN-LAST:event_rotacion270ActionPerformed

    /**
     * Método utilizado para realizar un escalado de aumento fijo a la imagen 
     * del escritorio.
     *
     * @param evt evento lanzador
     */
    private void btnEscaladoMasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscaladoMasActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                //Escalado
                AffineTransform at1 = AffineTransform.getScaleInstance(1.25, 1.25);
                AffineTransformOp atop1 = new AffineTransformOp(at1, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest1 = atop1.filter(img, null);
                vi.getLienzo2D().setImagen(imgdest1);
                vi.getLienzo2D().repaint();
            }
        }
    }//GEN-LAST:event_btnEscaladoMasActionPerformed

    /**
     * Método utilizado para realizar un escalado de disminución fijo a la imagen 
     * del escritorio.
     *
     * @param evt evento lanzador
     */
    private void btnEscaladoMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscaladoMenosActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                //Escalado
                AffineTransform at1 = AffineTransform.getScaleInstance(0.75, 0.75);
                AffineTransformOp atop1 = new AffineTransformOp(at1, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest1 = atop1.filter(img, null);
                vi.getLienzo2D().setImagen(imgdest1);
                vi.getLienzo2D().repaint();
            }
        }
    }//GEN-LAST:event_btnEscaladoMenosActionPerformed

    /**
     * Método utilizado para realizar pruebas de combinación sobre la imagen 
     * del lienzo con el menú desplegable.
     *
     * @param evt evento lanzador
     */
    private void opBandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opBandActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {
                    //definimos matriz de combinacion (verde con azul)
                    float[][] matriz = {{1.0F, 0.0F, 0.0F},
                    {0.0F, 0.0F, 1.0F},
                    {0.0F, 1.0F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    //se aplica sobre el raster
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_opBandActionPerformed

    /**
     * Método utilizado para realizar pruebas de operaciones de cambio de color 
     * sobre la imagen del lienzo con el menú desplegable.
     *
     * @param evt evento lanzador
     */
    private void opColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opColorActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {
                    //creamos espacio de color destino
                    ColorSpace cs = new sm.image.color.GreyColorSpace();//ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    //creamos el operador pasando el espadio destino
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi.getLienzo2D().setImagen(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_opColorActionPerformed

    /**
     * Método utilizado para realizar una operación de combinación de bandas, 
     * donde sustituimos la banda verde por la azul.
     *
     * @param evt evento lanzador
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {

                    //definimos matriz de combinacion (verde con azul)
                    float[][] matriz = {{1.0F, 0.0F, 0.0F},
                    {0.0F, 0.0F, 1.0F},
                    {0.0F, 1.0F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    //se aplica sobre el raster
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Método utilizado para mostrar las bandas de la imagen del lienzo 
     * seleccionada, creando por cada banda una nueva ventana interna.
     *
     * @param evt evento lanzador
     */
    private void btnBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBandasActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {

                for (int i = 0; i < img.getRaster().getNumBands(); i++) {
                    BufferedImage imgbanda = getImageBand(img, i);
                    vi = new VentanaInternaImagen();
                    vi.getLienzo2D().setImagen(imgbanda);
                    escritorio.add(vi);
                    vi.setVisible(true);
                    vi.setTitle("banda[" + i + "]");
                }
            }
        }
    }//GEN-LAST:event_btnBandasActionPerformed

    /**
     * Método utilizado para cambiar el espacio de color de la imagen del 
     * lienzo seleccionado.
     *
     * @param evt evento lanzador
     */
    private void espaciosColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espaciosColorActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {

                int seleccion = this.espaciosColor.getSelectedIndex();
                String sele = "";

                //creamos espacio de color destino
                ColorSpace cs = null;
                switch (seleccion) {
                    case 0:
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                        this.barraEstado.setText("espacio de color sRGB");
                        sele = "sRGB";
                        break;
                    case 1:
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                        this.barraEstado.setText("espacio de color YCC");
                        sele = "YCC";
                        break;
                    case 2:
                        cs = new sm.image.color.GreyColorSpace();
                        this.barraEstado.setText("espacio de color Grey");
                        sele = "Grey";
                        break;
                    case 3:
                        cs = new sm.image.color.YCbCrColorSpace();
                        this.barraEstado.setText("espacio de color YCbCr");
                        sele = "YCbCr";
                        break;
                }

                try {

                    //creamos el operador pasando el espadio destino
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);

                    vi = new VentanaInternaImagen();
                    vi.getLienzo2D().setImagen(imgdest);
                    escritorio.add(vi);
                    vi.setVisible(true);
                    vi.setTitle(sele);

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_espaciosColorActionPerformed

    /**
     * Método utilizado para cambiar mosntras y recoger colores de la paleta de 
     * colores de JAVA.
     *
     * @param evt evento lanzador
     */
    private void btnPaletColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaletColorActionPerformed

        //if (btnMover.isSelected()) {
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {

            Color color;

            //Creamos JColorChooser
            JColorChooser panelColor = new JColorChooser();

            color = panelColor.showDialog(null, "Selecciona un color", Color.GRAY);

            if (color != null) {
                if (this.checkColorFondo.isSelected()) {
                    vi.getLienzo2D().setColorFondo(color);
                    //vi.getLienzo2D().setRelleno(btnRellenar.isSelected());

                } else {
                    vi.getLienzo2D().setColorBorde(color);
                }

                vi.getLienzo2D().repaint();
            }

        }
        /*} else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }*/
    }//GEN-LAST:event_btnPaletColorActionPerformed

    /**
     * Método utilizado indicarle a la figura seleccionada del lienzo que se 
     * desea cambiar el tipo de trazo a discontinuo.
     *
     * @param evt evento lanzador
     */
    private void checkTrazoDiscontinuoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTrazoDiscontinuoActionPerformed

        if (btnMover.isSelected()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
            if (vi != null) {
                if (this.checkTrazoDiscontinuo.isSelected()) {
                    vi.getLienzo2D().setTipoTrazo(1);
                } else {
                    vi.getLienzo2D().setTipoTrazo(0);
                }

                vi.getLienzo2D().repaint();
            }
        } else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }
    }//GEN-LAST:event_checkTrazoDiscontinuoActionPerformed

    /**
     * Método utilizado indicarle a la figura seleccionada del lienzo que se 
     * desea cambiar la dirección del degradado a horizontal.
     *
     * @param evt evento lanzador
     */
    private void checkDegradadoHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDegradadoHorizontalActionPerformed

        if (btnMover.isSelected()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
            if (vi != null) {
                vi.getLienzo2D().setDireccion(true);
                vi.getLienzo2D().repaint();
            }
        } else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }
    }//GEN-LAST:event_checkDegradadoHorizontalActionPerformed

    /**
     * Método utilizado indicarle a la figura seleccionada del lienzo que se 
     * desea cambiar la dirección del degradado a vertical.
     *
     * @param evt evento lanzador
     */
    private void checkDegradoVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDegradoVerticalActionPerformed

        if (btnMover.isSelected()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
            if (vi != null) {
                vi.getLienzo2D().setDireccion(false);
                vi.getLienzo2D().repaint();
            }
        } else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }

    }//GEN-LAST:event_checkDegradoVerticalActionPerformed

    /**
     * Método utilizado indicarle a la figura seleccionada del lienzo que se 
     * desea activar el degradado.
     *
     * @param evt evento lanzador
     */
    private void btnDegradado1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDegradado1ActionPerformed

        if (btnMover.isSelected()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
            if (vi != null) {
                this.checkColorFondo.setEnabled(true);
                this.checkColorFondo.setSelected(true);
                vi.getLienzo2D().setDegradado(true);
                vi.getLienzo2D().setDireccion(this.checkDegradadoHorizontal.isSelected());
                vi.getLienzo2D().repaint();
            }
        } else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }


    }//GEN-LAST:event_btnDegradado1ActionPerformed

    /**
     * Método utilizado indicarle a la figura seleccionada del lienzo que se 
     * desea desactivar el color de relleno.
     *
     * @param evt evento lanzador
     */
    private void btnSinFondoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSinFondoActionPerformed

        if (btnMover.isSelected()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
            if (vi != null) {
                this.checkColorBorde.setSelected(true);
                this.checkColorFondo.setEnabled(false);
                vi.getLienzo2D().setRelleno(false);
                vi.getLienzo2D().repaint();
            }
        } else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }

    }//GEN-LAST:event_btnSinFondoActionPerformed

    /**
     * Método utilizado para controlar que si no se tiene pulsado el botón 
     * mover(Editar) no se debe elegir el tipo de color fondo.
     *
     * @param evt evento lanzador
     */
    private void checkColorFondoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkColorFondoActionPerformed

        if (!btnMover.isSelected()) {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }

    }//GEN-LAST:event_checkColorFondoActionPerformed

    /**
     * Método utilizado para controlar que si no se tiene pulsado el botón 
     * mover(Editar) no se debe elegir el tipo de color borde.
     *
     * @param evt evento lanzador
     */
    private void checkColorBordeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkColorBordeActionPerformed
        if (!btnMover.isSelected()) {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }
    }//GEN-LAST:event_checkColorBordeActionPerformed

    /**
     * Método utilizado para aplicar el filtro tintado a la imagen del lienzo 
     * utilizando  el color seleccionado en la ventanaPrincipal.
     *
     * @param evt evento lanzador
     */
    private void btnTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTintadoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {

                try {

                    TintOp tintado = new TintOp(vi.getLienzo2D().getColor(), 0.5f);
                    tintado.filter(img, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_btnTintadoActionPerformed

    /**
     * Método utilizado para aplicar el filtro sepia a la imagen del lienzo.
     *
     * @param evt evento lanzador
     */
    private void btnSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSepiaActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {

                try {

                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_btnSepiaActionPerformed

    /**
     * Método utilizado para aplicar el filtro ecualización a la imagen del lienzo.
     *
     * @param evt evento lanzador
     */
    private void btnEcualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEcualizarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {

                try {

                    //cambiamos la imagen al espacio de co,lor YCC
                    ColorConvertOp op = new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_PYCC), null);
                    op.filter(img, img);

                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(img, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_btnEcualizarActionPerformed

    /**
     * Método utilizado por para modificar el valor de intensidad del filtro 
     * posterizar de la imagen del lienzo activo.
     *
     * @param evt evento lanzador
     */
    private void sliderPosterizarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosterizarStateChanged

        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {
                    int valor = this.sliderPosterizar.getValue();
                    PosterizarOp poster = new PosterizarOp(valor);;
                    //aplicamos el operador sobre el metodo filter
                    poster.filter(imgFuente, img);
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderPosterizarStateChanged

    /**
     * Método utilizado para hacer una copia de la imagen del lienzo en otra 
     * que será modificada en los eventos de cambio del slider.
     *
     * @param evt evento lanzador
     */
    private void sliderPosterizarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            //hacemos copia de la imagen original y se la asignamos al imgFuente
            ColorModel cm = vi.getLienzo2D().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderPosterizarFocusGained

    /**
     * Método utilizado cuando se pierde el foco del slider de posterizar para poner
     * la imagen de copia a null y resetear el slider.
     *
     * @param evt evento lanzador
     */
    private void sliderPosterizarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusLost
        imgFuente = null;
        this.sliderPosterizar.setValue(0);
    }//GEN-LAST:event_sliderPosterizarFocusLost

    /**
     * Método utilizado para realizar la operación resaltado de rojo a la 
     * imagen del lienzo.
     *
     * @param evt evento lanzador
     */
    private void btnResaltarRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResaltarRojoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {

                try {

                    RedOp ecualizacion = new RedOp(20);
                    ecualizacion.filter(img, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_btnResaltarRojoActionPerformed

    /**
     * Método utilizado para realizar una operación propia en la que sumamos un 
     * valor pasado a las bandas de cada pixel.
     *
     * @param evt evento lanzador
     */
    private void btnPropioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPropioActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {

                try {

                    DOperador op = new DOperador(10);
                    op.filter(img, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_btnPropioActionPerformed

    /**
     * Método utilizado para iniciar la reprodución de un video o sonido.
     *
     * @param evt evento lanzador
     */
    private void btnReproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReproducirActionPerformed

        VentanaInternaVideo vv = (VentanaInternaVideo) escritorio.getSelectedFrame();
        if (vv != null) {
            vv.play();
        } else {
            File f = (File) this.listReproduccion.getSelectedItem();
            if (f != null) {
                player = new SMClipPlayer(f);
                if (player != null) {
                    player.addLineListener(new ManejadorAudio());
                    player.play();
                }
            }
        }

    }//GEN-LAST:event_btnReproducirActionPerformed

    /**
     * Método utilizado para detener la reprodución de un video o sonido.
     *
     * @param evt evento lanzador
     */
    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed

        VentanaInternaVideo vv = (VentanaInternaVideo) escritorio.getSelectedFrame();
        if (vv != null) {
            vv.stop();
        } else {
            File f = (File) this.listReproduccion.getSelectedItem();
            if (player != null) {
                player.stop();
                player = null;
            }

            if (recorder != null) {
                recorder.stop();
                recorder = null;
                this.btnSonido.setSelected(false);
            }
        }
    }//GEN-LAST:event_btnStopActionPerformed

    /**
     * Método utilizado para iniciar la grabación de sonido del micrófono 
     * principal, indicando primero el nombre del archivo donde guardará dicho 
     * sonido. Los formatos aceptados son WAV y AU.
     *
     * @param evt evento lanzador
     */
    private void btnSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSonidoActionPerformed

        JFileChooser dlg = new JFileChooser();
        //Creamos los filtros JPN Y PNG
        FileFilter imagenesFilter = new FileNameExtensionFilter("Formatos aceptados", "WAV", "AU");
        dlg.addChoosableFileFilter(imagenesFilter);

        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {

                File f = dlg.getSelectedFile();
                recorder = new SMSoundRecorder(f);
                if (recorder != null) {
                    recorder.record();
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(escritorio, "Error al guardar el sonido, no has seleccionado un formato valido ['wav','au']");
            }
        } else if (resp == JFileChooser.CANCEL_OPTION) {
            JOptionPane.showMessageDialog(escritorio, "No se ha guardado el sonido");
        }


    }//GEN-LAST:event_btnSonidoActionPerformed

    /**
     * Método utilizado para iniciar la grabación de video de la webcam 
     * principal.
     *
     * @param evt evento lanzador
     */
    private void btnWebCamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWebCamActionPerformed
        VentanaInternaMultimedia vc = VentanaInternaCamara.getInstance();
        if (vc != null) {
            escritorio.add(vc);
            vc.setTitle("Grabando");
            vc.setVisible(true);
        }
    }//GEN-LAST:event_btnWebCamActionPerformed

    /**
     * Método utilizado para hacer una instantánea tanto a la webcam como a un 
     * video.
     *
     * @param evt evento lanzador
     */
    private void btnInstantaneaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstantaneaActionPerformed
        VentanaInternaMultimedia vc = (VentanaInternaMultimedia) escritorio.getSelectedFrame();
        if (vc != null) {
            BufferedImage img = vc.getImage();
            VentanaInternaImagen vi = new VentanaInternaImagen();
            vi.getLienzo2D().setImagen(img);
            escritorio.add(vi);
            vi.setVisible(true);
            vi.setTitle("Captura");
        }
    }//GEN-LAST:event_btnInstantaneaActionPerformed

    /**
     * Método utilizado para mostrar el diálogo ayuda del menú desplegable.
     *
     * @param evt evento lanzador
     */
    private void btnAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAyudaActionPerformed
        JOptionPane.showMessageDialog(escritorio, "Nombre programa: Intento de photoshop \n Versión: 1.0 \n Autor: Daniel Ruiz Medina");
    }//GEN-LAST:event_btnAyudaActionPerformed

    /**
     * Método utilizado para indicar al lienzo activo que se desean mover sus 
     * figuras.
     *
     * @param evt evento lanzador
     */
    private void btnMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoverActionPerformed

        DLienzo2D.setMover(true);
    }//GEN-LAST:event_btnMoverActionPerformed

    /**
     * Método utilizado para indicar al lienzo activo que se desea pintar un 
     * rectángulo redondeado.
     *
     * @param evt evento lanzador
     */
    private void btnRectanguloRoundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectanguloRoundsActionPerformed
        btnRectanguloRounds.setSelected(true);
        DLienzo2D.setMover(false);//por si se queda seleccionado mover (mismo grupo)
        barraEstado.setText("Dibujando: cuadrado redondeado");
        DLienzo2D.setForma(DLienzo2D.RECTANGULOROUNDS);
    }//GEN-LAST:event_btnRectanguloRoundsActionPerformed

    /**
     * Método utilizado para indicar al lienzo activo que se desea pintar un 
     * trazo libre.
     *
     * @param evt evento lanzador
     */
    private void btnTrazoLibreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrazoLibreActionPerformed
        btnRectanguloRounds.setSelected(true);
        DLienzo2D.setMover(false);//por si se queda seleccionado mover (mismo grupo)
        barraEstado.setText("Dibujando: trazo libre");
        DLienzo2D.setForma(DLienzo2D.TRAZOLIBRE);
    }//GEN-LAST:event_btnTrazoLibreActionPerformed

    /**
     * Método utilizado para copiar la ventana interna en otra.
     *
     * @param evt evento lanzador
     */
    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {

                VentanaInternaImagen vi2 = new VentanaInternaImagen();
                vi2.getLienzo2D().setImagen(img);
                escritorio.add(vi2);
                vi2.setVisible(true);
                vi2.setTitle("copia de " + vi.getTitle());
                vi2.getLienzo2D().VolcarImagen();
            }
        }
    }//GEN-LAST:event_btnCopyActionPerformed

    /**
     * Método utilizado para aplicar el filtro negativo a la imagen del lienzo 
     * activo.
     *
     * @param evt evento lanzador
     */
    private void btnNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNegativoActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
        aplicarLookup(tabla);
    }//GEN-LAST:event_btnNegativoActionPerformed

    /**
     * Método utilizado para modificar de forma dinámica con un slider el valor 
     * de la función cuadrática.
     *
     * @param evt evento lanzador
     */
    private void sliderCuadraticaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderCuadraticaStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {

                    int valor = this.sliderCuadratica.getValue();
                    LookupTable tabla = cuadratica(valor);

                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderCuadraticaStateChanged

    /**
     * Método utilizado para hacer una copia de la imagen del lienzo en otra 
     * que será modificada en los eventos de cambio del slider.
     *
     * @param evt evento lanzador
     */
    private void sliderCuadraticaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderCuadraticaFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            //hacemos copia de la imagen original y se la asignamos al imgFuente
            ColorModel cm = vi.getLienzo2D().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderCuadraticaFocusGained

    /**
     * Método utilizado cuando se pierde el foco del slider cradratico para poner
     * la imagen de copia a null y resetear el slider.
     *
     * @param evt evento lanzador
     */
    private void sliderCuadraticaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderCuadraticaFocusLost
        imgFuente = null;
        this.sliderCuadratica.setValue(0);
    }//GEN-LAST:event_sliderCuadraticaFocusLost

    /**
     * Método utilizado para modificar de forma dinámica con un slider el valor 
     * de intensidad de la operación tintado.
     *
     * @param evt evento lanzador
     */
    private void sliderTintadoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTintadoStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {

                    float valor = this.sliderTintado.getValue() / 100.0f;

                    TintOp tintado = new TintOp(vi.getLienzo2D().getColor(), valor);
                    tintado.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderTintadoStateChanged

    /**
     * Método utilizado para hacer una copia de la imagen del lienzo en otra 
     * que será modificada en los eventos de cambio del slider.
     *
     * @param evt evento lanzador
     */
    private void sliderTintadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTintadoFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            //hacemos copia de la imagen original y se la asignamos al imgFuente
            ColorModel cm = vi.getLienzo2D().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderTintadoFocusGained

    /**
     * Método utilizado cuando se pierde el foco del slider de titnado para poner
     * la imagen de copia a null y resetear el slider.
     *
     * @param evt evento lanzador
     */
    private void sliderTintadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTintadoFocusLost
        imgFuente = null;
        this.sliderTintado.setValue(50);
    }//GEN-LAST:event_sliderTintadoFocusLost

    /**
     * Método utilizado para realizar un tintado de forma atomática con el 
     * color seleccionado.
     *
     * @param evt evento lanzador
     */
    private void btnTintadoAutomaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTintadoAutomaticoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {

                try {

                    TintadoAutoOp tintado = new TintadoAutoOp(vi.getLienzo2D().getColor(), 0.5f);
                    tintado.filter(img, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_btnTintadoAutomaticoActionPerformed

    /**
     * Método utilizado para realizar un filtro de enverdecer.
     *
     * @param evt evento lanzador
     */
    private void btnEnverdecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnverdecerActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {

                    //definimos matriz de combinacion (verde con azul)
                    float[][] matriz = {{0.5F, 0.0F, 0.0F},
                    {0.0F, 1.0F, 0.0F},
                    {0.0F, 0.0F, 0.5F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    //se aplica sobre el raster
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_btnEnverdecerActionPerformed

    /**
     * Método utilizado para aplicar el filtro del reto 10, potenciando la 
     * luminosidad pasandole un parametro que indica hasta qué valores 
     * se deben iluminar.
     *
     * @param evt evento lanzador
     */
    private void btnUmbralTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUmbralTActionPerformed
        LookupTable tabla = umbralT(128);
        aplicarLookup(tabla);
    }//GEN-LAST:event_btnUmbralTActionPerformed

    /**
     * Método utilizado para modificar de forma dinámica con un slider el valor 
     * de hasta dónde debe realizarse la iluminación del operador propio del reto 10.
     *
     * @param evt evento lanzador
     */
    private void sliderUmbralTStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderUmbralTStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {

                    int valor = this.sliderUmbralT.getValue();
                    LookupTable tabla = umbralT(valor);

                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderUmbralTStateChanged

    /**
     * Método utilizado para hacer una copia de la imagen del lienzo en otra 
     * que será modificada en los eventos de cambio del slider.
     *
     * @param evt evento lanzador
     */
    private void sliderUmbralTFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralTFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            //hacemos copia de la imagen original y se la asignamos al imgFuente
            ColorModel cm = vi.getLienzo2D().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderUmbralTFocusGained

    /**
     * Método utilizado cuando se pierde el foco del slider de umbral para poner
     * la imagen de copia a null y resetear el slider.
     *
     * @param evt evento lanzador
     */
    private void sliderUmbralTFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralTFocusLost
        imgFuente = null;
        this.sliderUmbralT.setValue(128);
    }//GEN-LAST:event_sliderUmbralTFocusLost

    /**
     * Método utilizado para realizar la operación de función indicada(usando 
     * LookupTable), en mi caso coseno.
     *
     * @param evt evento lanzador
     */
    private void btnBinarizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinarizarActionPerformed
        LookupTable tabla = binarizar(90);
        aplicarLookup(tabla);
    }//GEN-LAST:event_btnBinarizarActionPerformed

    /**
     * Método que se lanza cuando se deselecciona pintar linea y pone la opción 
     * mover a true.
     *
     * @param evt evento lanzador
     */
    private void btnLineaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLineaMouseReleased
        //DLienzo2D.setMover(true);
    }//GEN-LAST:event_btnLineaMouseReleased

    /**
     * Método que se lanza cuando se deselecciona pintar rectángulo y pone la opción 
     * mover a true.
     *
     * @param evt evento lanzador
     */
    private void btnRectanguloMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRectanguloMouseReleased
        //DLienzo2D.setMover(true);
    }//GEN-LAST:event_btnRectanguloMouseReleased

    /**
     * Método que se lanza cuando se deselecciona pintar rectángulo redondeado y pone la opción 
     * mover a true.
     *
     * @param evt evento lanzador
     */
    private void btnRectanguloRoundsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRectanguloRoundsMouseReleased
        //DLienzo2D.setMover(true);
    }//GEN-LAST:event_btnRectanguloRoundsMouseReleased

    /**
     * Método que se lanza cuando se deselecciona pintar óvalo y pone la opción 
     * mover a true.
     *
     * @param evt evento lanzador
     */
    private void btnCIrculoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCIrculoMouseReleased
        //DLienzo2D.setMover(true);
    }//GEN-LAST:event_btnCIrculoMouseReleased

    private void sliderTransparenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTransparenciaStateChanged
  
        if (btnMover.isSelected()) {

            if (this.btnTransparencia.isSelected()) {
                VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
                if (vi != null) {
                    float valor = (this.sliderTransparencia.getValue() / 10.0f);
                    vi.getLienzo2D().setTransparente(btnTransparencia.isSelected(), valor);
                    vi.getLienzo2D().repaint();
                }
            } else {
                JOptionPane.showMessageDialog(escritorio, "Selecciona primero el boton de transparencia");
            }
        } else {
            JOptionPane.showMessageDialog(escritorio, "Debes tener seleccionado el boton de Editar / Mover");
        }
    }//GEN-LAST:event_sliderTransparenciaStateChanged

    /**
     * Método que devuelve las bandas de una imagen pasada.
     * @param img imagen de la que se desea sacar las bandas
     * @param banda número de banda que se desea ver o devolver.
     * @return (tipo: BufferedImage) imagen de banda.
     */
    private BufferedImage getImageBand(BufferedImage img, int banda) {
        //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
        //Creamos el nuevo raster a partir del raster de la imagen original
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0, img.getWidth(), img.getHeight(), 0, 0, vband);
        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        return new BufferedImage(cm, bRaster, false, null);
    }

    /**
     * Método que devuelve una tabla aplicando la función coseno
     * @param m grado del coseno.
     * @return (tipo: LookupTable) tabla de la operacion coseno.
     */
    public LookupTable binarizar(double m) {

        byte lt[] = new byte[256];

        for (int i = 0; i < 256; i++) {
            lt[i] =  (i < m) ? (byte)0 : (byte)255;
        }

        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    /**
     * Método que devuelve una tabla aplicando la función umbralT pedida en el 
     * reto 10, que ilumina la imagen dependiendo del parámetro.
     * @param m umbral hasta donde se desea realizar la iluminación.
     * @return (tipo: LookupTable) tabla de la operacion umbralT.
     */
    public LookupTable umbralT(double m) {

        double Max = Math.sqrt(m);
        double K1 = m / Max;

        byte lt[] = new byte[256];
        lt[0] = 0;

        for (int l = 1; l < 256; l++) {
            if (l <= m) {
                lt[l] = (byte) (K1 * Math.sqrt(l));
            } else {
                lt[l] = (byte) l;
            }
        }

        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    /**
     * Método que devuelve una tabla aplicando la función cuadrática.
     * @param m punto de inflexión de la función cuadrática.
     * @return (tipo: LookupTable) tabla de la operacion cuadrática.
     */
    public LookupTable cuadratica(double m) {

        double Max;

        if (m >= 128.0) {
            Max = ((1.0 / 100.0) * (Math.pow(0.0 - m, 2)));
        } else {
            Max = ((1.0 / 100.0) * (Math.pow(255.0 - m, 2)));
        }

        double K = 255.0 / Max;

        byte lt[] = new byte[256];
        lt[0] = 0;

        for (int l = 1; l < 256; l++) {
            lt[l] = (byte) (K * ((1.0 / 100.0) * (Math.pow((double) l - m, 2))));
        }

        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    /**
     * Método al que pasado una tabla se le aplica dicha a la imagen del lienzo activo.
     * @param tabla tabla que se desea aplicar como filtro a la imagen.
     */
    private void aplicarLookup(LookupTable tabla) {
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen();
            if (img != null) {
                try {
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }

    /**
     * Método utlizado para elegir el tipo de kernel utilizado para aplicar en 
     * los filtros de la imagen.
     * @param seleccion tipo de filtro seleccionado.
     */
    private Kernel getKernel(int seleccion) {
        Kernel k = null;
        switch (seleccion) {
            case 0://Media
                //float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};//9 valores del filtro

                //float filtro[] = KernelProducer.MASCARA_MEDIA_3x3;
                //k = new Kernel(3, 3, filtro);//es una clase especifica de java que se le indica la dimension y filtros
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);

                break;
            case 1://binomial
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
            case 2://binomial
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
            case 3://binomial
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
            case 4://laplizamos
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
            case 5://horizontal
                float filtro[] = {0.2f, 0.2f, 0.2f, 0.2f, 0.2f};

                k = new Kernel(5, 1, filtro);
                break;
            case 6://diagonal
                float filtro2[] = {0.2f, 0f, 0f, 0f, 0.2f, 0f, 0f, 0f, 0.2f};

                k = new Kernel(3, 3, filtro2);
                break;
        }
        return k;
    }

    /**
     * Método utlizado modificar el grosor interno.
     *
     * @param grosor tnuevo valor de grosor.
     */
    public void setGrosor(Float grosor) {
        this.grosor.setValue(grosor.intValue());
    }

    /**
     * Método utilizado  ver si el trazo es discontinuo o no.
     *
     * @return (tipo: JCheckBox) checkbox pulsado.
     */
    public JCheckBox getCheckTrazoDiscontinuo() {
        return checkTrazoDiscontinuo;
    }

    /**
     * Clase manejadora de eventos de de la ventanas de audio
     *
     * @author: Daniel Ruiz Medina
     * @version: 01/06/2021
     */
    private class ManejadorAudio implements LineListener {

        /**
         * Método utlizado para indicar se ha pulsado los botones reproducir, 
         * parar o cerrar.
         *
         * @param event evento lanzador.
         */
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                btnReproducir.setEnabled(false);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                btnReproducir.setEnabled(true);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuItemAbrir;
    private javax.swing.JCheckBoxMenuItem MenuItemBarraEstado;
    private javax.swing.JMenuItem MenuItemGuardar;
    private javax.swing.JMenuItem MenuItemNuevo;
    private javax.swing.JPanel PanelCentral;
    private javax.swing.JPanel PanelOpcionesImagen;
    private javax.swing.JPanel PanelOpcionesImagenInferior;
    private javax.swing.JPanel PnelOpcionesImagenSuperior;
    private javax.swing.JMenuItem RescaleOpItem;
    private javax.swing.JLabel barraEstado;
    private javax.swing.JToolBar barraOpcionesImagen;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JToggleButton btnAlisar;
    private javax.swing.JMenuItem btnAyuda;
    private javax.swing.JButton btnBandas;
    private javax.swing.JButton btnBinarizar;
    private javax.swing.JToggleButton btnCIrculo;
    private javax.swing.JToggleButton btnClipArea;
    private javax.swing.JButton btnCopy;
    private javax.swing.ButtonGroup btnDegradado;
    private javax.swing.JToggleButton btnDegradado1;
    private javax.swing.JButton btnEcualizar;
    private javax.swing.JButton btnEnverdecer;
    private javax.swing.JButton btnEscaladoMas;
    private javax.swing.JButton btnEscaladoMenos;
    private javax.swing.JButton btnIluminar;
    private javax.swing.JButton btnInstantanea;
    private javax.swing.JToggleButton btnLinea;
    private javax.swing.JToggleButton btnMover;
    private javax.swing.JButton btnNegativo;
    private javax.swing.JButton btnNormal;
    private javax.swing.JButton btnOscurecer;
    private javax.swing.JButton btnPaletColor;
    private javax.swing.JButton btnPropio;
    private javax.swing.JToggleButton btnRectangulo;
    private javax.swing.JToggleButton btnRectanguloRounds;
    private javax.swing.JToggleButton btnRellenar;
    private javax.swing.JButton btnReproducir;
    private javax.swing.JButton btnResaltarRojo;
    private javax.swing.JButton btnSepia;
    private javax.swing.JToggleButton btnSinFondo;
    private javax.swing.JToggleButton btnSonido;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnTintado;
    private javax.swing.JButton btnTintadoAutomatico;
    private javax.swing.JToggleButton btnTransparencia;
    private javax.swing.JToggleButton btnTrazoLibre;
    private javax.swing.JButton btnUmbralT;
    private javax.swing.JButton btnVolcar;
    private javax.swing.JButton btnWebCam;
    private javax.swing.JCheckBox checkColorBorde;
    private javax.swing.JCheckBox checkColorFondo;
    private javax.swing.JCheckBox checkDegradadoHorizontal;
    private javax.swing.JCheckBox checkDegradoVertical;
    private javax.swing.JCheckBox checkTrazoDiscontinuo;
    private javax.swing.JMenuItem controlOpItem;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JComboBox<String> espaciosColor;
    private javax.swing.JSpinner grosor;
    private javax.swing.ButtonGroup grupoBotonesColor;
    private javax.swing.ButtonGroup grupoBotonesFondoDegradado;
    private javax.swing.ButtonGroup grupoHerramientas1;
    private javax.swing.JToolBar herramientas;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JComboBox<File> listReproduccion;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JMenuItem opAffine;
    private javax.swing.JMenuItem opBand;
    private javax.swing.JMenuItem opColor;
    private javax.swing.JMenuItem opLook;
    private javax.swing.JPanel panelBrillo;
    private javax.swing.JPanel panelContraste;
    private javax.swing.JPanel panelCuadratica;
    private javax.swing.JPanel panelEscalado;
    private javax.swing.JPanel panelEspaciosColor;
    private javax.swing.JPanel panelFiltros;
    private javax.swing.JPanel panelRotacion;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton rotacion270;
    private javax.swing.JButton rotacion90;
    private javax.swing.JComboBox<String> seleccionMascara;
    private javax.swing.JComboBox<Color> selectColor;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderCuadratica;
    private javax.swing.JSlider sliderPosterizar;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderTintado;
    private javax.swing.JSlider sliderTransparencia;
    private javax.swing.JSlider sliderUmbralT;
    // End of variables declaration//GEN-END:variables
}
