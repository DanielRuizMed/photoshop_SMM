/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica7;

import java.awt.image.BufferedImage;
import java.io.File;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;

/**
 * Clase que hereda de VentanaInternaMultimedia y que se lanzará cuando la clase
 * VentanaPrincipal requiera el uso de videos.
 * @author: Daniel Ruiz Medina
 * @version: 01/06/2021
 */
public class VentanaInternaVideo extends VentanaInternaMultimedia {

    private EmbeddedMediaPlayer vlcplayer = null;
    private File fMedia;

    /**
     * Constructor que inicializa el vlcplayer y recibe un archivo de video
     *
     * @param f archivo de video para reproducir.
     */
    public VentanaInternaVideo(File f) {
        initComponents();
        fMedia = f;
        EmbeddedMediaPlayerComponent aVisual = new EmbeddedMediaPlayerComponent();
        getContentPane().add(aVisual, java.awt.BorderLayout.CENTER);
        vlcplayer = aVisual.getMediaPlayer();
    }

    /**
     * Método estático utilizando para llamar al constructor de dicha clase,
     * creando la clase y devolviendo la instancia de la clase ya creada
     *
     * @param f archivo de video que se desea reproducir.
     * @return (tipo: VentanaInternaVideo) instancia de clase.
     */
    public static VentanaInternaVideo getInstance(File f) {
        VentanaInternaVideo v = new VentanaInternaVideo(f);
        return (v.vlcplayer != null ? v : null);
    }

    /**
     * Método que inicia la reproducción del video.
     */
    public void play() {
        if (vlcplayer != null) {
            if (vlcplayer.isPlayable()) {
                //Si se estaba reproduciendo
                vlcplayer.play();
            } else {
                vlcplayer.playMedia(fMedia.getAbsolutePath());
            }
        }
    }

    /**
     * Método que detiene la reproducción del video.
     */
    public void stop() {
        if (vlcplayer != null) {
            if (vlcplayer.isPlaying()) {
                vlcplayer.pause();
            } else {
                vlcplayer.stop();
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        setBounds(0, 0, 410, 308);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que detiene vlcplayer utilizado para reproducir el video cuando 
     * se selecciona el botón cerrar de la ventana.
     * @param evt evento lanzador
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if (vlcplayer != null) {
            vlcplayer.stop();
            vlcplayer = null;
        }
    }//GEN-LAST:event_formInternalFrameClosing

    /**
     * Método que devuelve una instantánea(Foto) del video.
     * @return (tipo: BufferedImage) foto instantánea del video.
     */
    @Override
    public BufferedImage getImage() {
        return vlcplayer!=null ? vlcplayer.getSnapshot() : null;
    }

    /**
     * Método que modificaría la imagen, no se utiliza pero se implementa 
     * por heredar de una clase abstracta
     * @param imagen que sustituiría la antigua imagen
     */
    @Override
    public void setImage(BufferedImage imagen) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
